package resources

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-swagger/go-swagger/httpkit"

	"permissions/models"
)

/*UpdateResourceOK OK

swagger:response updateResourceOK
*/
type UpdateResourceOK struct {

	// In: body
	Payload *models.ResourceOut `json:"body,omitempty"`
}

// NewUpdateResourceOK creates UpdateResourceOK with default headers values
func NewUpdateResourceOK() *UpdateResourceOK {
	return &UpdateResourceOK{}
}

// WithPayload adds the payload to the update resource o k response
func (o *UpdateResourceOK) WithPayload(payload *models.ResourceOut) *UpdateResourceOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update resource o k response
func (o *UpdateResourceOK) SetPayload(payload *models.ResourceOut) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateResourceOK) WriteResponse(rw http.ResponseWriter, producer httpkit.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		if err := producer.Produce(rw, o.Payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*UpdateResourceBadRequest Bad Request

swagger:response updateResourceBadRequest
*/
type UpdateResourceBadRequest struct {

	// In: body
	Payload *models.ErrorOut `json:"body,omitempty"`
}

// NewUpdateResourceBadRequest creates UpdateResourceBadRequest with default headers values
func NewUpdateResourceBadRequest() *UpdateResourceBadRequest {
	return &UpdateResourceBadRequest{}
}

// WithPayload adds the payload to the update resource bad request response
func (o *UpdateResourceBadRequest) WithPayload(payload *models.ErrorOut) *UpdateResourceBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update resource bad request response
func (o *UpdateResourceBadRequest) SetPayload(payload *models.ErrorOut) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateResourceBadRequest) WriteResponse(rw http.ResponseWriter, producer httpkit.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		if err := producer.Produce(rw, o.Payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*UpdateResourceNotFound Not Found

swagger:response updateResourceNotFound
*/
type UpdateResourceNotFound struct {

	// In: body
	Payload *models.ErrorOut `json:"body,omitempty"`
}

// NewUpdateResourceNotFound creates UpdateResourceNotFound with default headers values
func NewUpdateResourceNotFound() *UpdateResourceNotFound {
	return &UpdateResourceNotFound{}
}

// WithPayload adds the payload to the update resource not found response
func (o *UpdateResourceNotFound) WithPayload(payload *models.ErrorOut) *UpdateResourceNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update resource not found response
func (o *UpdateResourceNotFound) SetPayload(payload *models.ErrorOut) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateResourceNotFound) WriteResponse(rw http.ResponseWriter, producer httpkit.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		if err := producer.Produce(rw, o.Payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*UpdateResourceInternalServerError update resource internal server error

swagger:response updateResourceInternalServerError
*/
type UpdateResourceInternalServerError struct {

	// In: body
	Payload *models.ErrorOut `json:"body,omitempty"`
}

// NewUpdateResourceInternalServerError creates UpdateResourceInternalServerError with default headers values
func NewUpdateResourceInternalServerError() *UpdateResourceInternalServerError {
	return &UpdateResourceInternalServerError{}
}

// WithPayload adds the payload to the update resource internal server error response
func (o *UpdateResourceInternalServerError) WithPayload(payload *models.ErrorOut) *UpdateResourceInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update resource internal server error response
func (o *UpdateResourceInternalServerError) SetPayload(payload *models.ErrorOut) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateResourceInternalServerError) WriteResponse(rw http.ResponseWriter, producer httpkit.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		if err := producer.Produce(rw, o.Payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

package resources

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-swagger/go-swagger/httpkit"

	"permissions/models"
)

/*ListResourcesOK OK

swagger:response listResourcesOK
*/
type ListResourcesOK struct {

	// In: body
	Payload *models.ResourcesOut `json:"body,omitempty"`
}

// NewListResourcesOK creates ListResourcesOK with default headers values
func NewListResourcesOK() *ListResourcesOK {
	return &ListResourcesOK{}
}

// WithPayload adds the payload to the list resources o k response
func (o *ListResourcesOK) WithPayload(payload *models.ResourcesOut) *ListResourcesOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list resources o k response
func (o *ListResourcesOK) SetPayload(payload *models.ResourcesOut) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListResourcesOK) WriteResponse(rw http.ResponseWriter, producer httpkit.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		if err := producer.Produce(rw, o.Payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*ListResourcesInternalServerError list resources internal server error

swagger:response listResourcesInternalServerError
*/
type ListResourcesInternalServerError struct {

	// In: body
	Payload *models.ErrorOut `json:"body,omitempty"`
}

// NewListResourcesInternalServerError creates ListResourcesInternalServerError with default headers values
func NewListResourcesInternalServerError() *ListResourcesInternalServerError {
	return &ListResourcesInternalServerError{}
}

// WithPayload adds the payload to the list resources internal server error response
func (o *ListResourcesInternalServerError) WithPayload(payload *models.ErrorOut) *ListResourcesInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list resources internal server error response
func (o *ListResourcesInternalServerError) SetPayload(payload *models.ErrorOut) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListResourcesInternalServerError) WriteResponse(rw http.ResponseWriter, producer httpkit.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		if err := producer.Produce(rw, o.Payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

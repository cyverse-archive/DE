package permissions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-swagger/go-swagger/httpkit/middleware"
)

// GrantPermissionHandlerFunc turns a function with the right signature into a grant permission handler
type GrantPermissionHandlerFunc func(GrantPermissionParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GrantPermissionHandlerFunc) Handle(params GrantPermissionParams) middleware.Responder {
	return fn(params)
}

// GrantPermissionHandler interface for that can handle valid grant permission params
type GrantPermissionHandler interface {
	Handle(GrantPermissionParams) middleware.Responder
}

// NewGrantPermission creates a new http.Handler for the grant permission operation
func NewGrantPermission(ctx *middleware.Context, handler GrantPermissionHandler) *GrantPermission {
	return &GrantPermission{Context: ctx, Handler: handler}
}

/*GrantPermission swagger:route POST /permissions permissions grantPermission

Grant Permission to a Resource

Grants permission to access a resource to a subject. If the subject already has permission to access the resource then the permission level will be updated (assuming the new permission level is different from the existing permission level). Neither the resource nor the subject needs to be registered in the database before this endpoint is called; they will be added to the database if necessary. This endpoint will return an error response if the subject ID is already in use and associated with a different subject type. It will also return an error if either the specified resource type or permission level does not exist.

*/
type GrantPermission struct {
	Context *middleware.Context
	Handler GrantPermissionHandler
}

func (o *GrantPermission) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewGrantPermissionParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

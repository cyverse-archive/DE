package permissions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-swagger/go-swagger/httpkit/middleware"
)

// PutPermissionHandlerFunc turns a function with the right signature into a put permission handler
type PutPermissionHandlerFunc func(PutPermissionParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PutPermissionHandlerFunc) Handle(params PutPermissionParams) middleware.Responder {
	return fn(params)
}

// PutPermissionHandler interface for that can handle valid put permission params
type PutPermissionHandler interface {
	Handle(PutPermissionParams) middleware.Responder
}

// NewPutPermission creates a new http.Handler for the put permission operation
func NewPutPermission(ctx *middleware.Context, handler PutPermissionHandler) *PutPermission {
	return &PutPermission{Context: ctx, Handler: handler}
}

/*PutPermission swagger:route PUT /permissions/resources/{resource_type}/{resource_name}/subjects/{subject_type}/{subject_id} permissions putPermission

Grant Permission to a Resource

Grants permission to access a resource to a subject. If the subject already has permission to access the resource then the permission level will be updated (assuming the new permission level is different from the existing permission level). Neither the resource nor the subject needs to be registered in the database before this endpoint is called; they will be added to the database if necessary. This endpoint will return an error response if the subject ID is already in use and associated with a different subject type. It will also return an error if either the specified resource type or permission level does not exist.

*/
type PutPermission struct {
	Context *middleware.Context
	Handler PutPermissionHandler
}

func (o *PutPermission) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewPutPermissionParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

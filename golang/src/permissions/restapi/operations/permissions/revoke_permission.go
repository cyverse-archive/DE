package permissions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-swagger/go-swagger/httpkit/middleware"
)

// RevokePermissionHandlerFunc turns a function with the right signature into a revoke permission handler
type RevokePermissionHandlerFunc func(RevokePermissionParams) middleware.Responder

// Handle executing the request and returning a response
func (fn RevokePermissionHandlerFunc) Handle(params RevokePermissionParams) middleware.Responder {
	return fn(params)
}

// RevokePermissionHandler interface for that can handle valid revoke permission params
type RevokePermissionHandler interface {
	Handle(RevokePermissionParams) middleware.Responder
}

// NewRevokePermission creates a new http.Handler for the revoke permission operation
func NewRevokePermission(ctx *middleware.Context, handler RevokePermissionHandler) *RevokePermission {
	return &RevokePermission{Context: ctx, Handler: handler}
}

/*RevokePermission swagger:route DELETE /permissions/resources/{resource_type}/{resource_name}/subjects/{subject_type}/{subject_id} permissions revokePermission

Revoke Permission to a Resource

Removes a permission entry from the database. This endpoint will return an error status if the resource type, resource, subject or the permission itself does not exist.

*/
type RevokePermission struct {
	Context *middleware.Context
	Handler RevokePermissionHandler
}

func (o *RevokePermission) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewRevokePermissionParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

package permissions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-swagger/go-swagger/errors"
	"github.com/go-swagger/go-swagger/httpkit/middleware"

	strfmt "github.com/go-swagger/go-swagger/strfmt"
)

// NewListResourcePermissionsParams creates a new ListResourcePermissionsParams object
// with the default values initialized.
func NewListResourcePermissionsParams() ListResourcePermissionsParams {
	var ()
	return ListResourcePermissionsParams{}
}

// ListResourcePermissionsParams contains all the bound params for the list resource permissions operation
// typically these are obtained from a http.Request
//
// swagger:parameters listResourcePermissions
type ListResourcePermissionsParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request

	/*The resource name.
	  Required: true
	  In: path
	*/
	ResourceName string
	/*The resource type name.
	  Required: true
	  In: path
	*/
	ResourceType string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls
func (o *ListResourcePermissionsParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error
	o.HTTPRequest = r

	rResourceName, rhkResourceName, _ := route.Params.GetOK("resource_name")
	if err := o.bindResourceName(rResourceName, rhkResourceName, route.Formats); err != nil {
		res = append(res, err)
	}

	rResourceType, rhkResourceType, _ := route.Params.GetOK("resource_type")
	if err := o.bindResourceType(rResourceType, rhkResourceType, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListResourcePermissionsParams) bindResourceName(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	o.ResourceName = raw

	return nil
}

func (o *ListResourcePermissionsParams) bindResourceType(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	o.ResourceType = raw

	return nil
}

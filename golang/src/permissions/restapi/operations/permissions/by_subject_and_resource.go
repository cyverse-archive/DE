package permissions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-swagger/go-swagger/httpkit/middleware"
)

// BySubjectAndResourceHandlerFunc turns a function with the right signature into a by subject and resource handler
type BySubjectAndResourceHandlerFunc func(BySubjectAndResourceParams) middleware.Responder

// Handle executing the request and returning a response
func (fn BySubjectAndResourceHandlerFunc) Handle(params BySubjectAndResourceParams) middleware.Responder {
	return fn(params)
}

// BySubjectAndResourceHandler interface for that can handle valid by subject and resource params
type BySubjectAndResourceHandler interface {
	Handle(BySubjectAndResourceParams) middleware.Responder
}

// NewBySubjectAndResource creates a new http.Handler for the by subject and resource operation
func NewBySubjectAndResource(ctx *middleware.Context, handler BySubjectAndResourceHandler) *BySubjectAndResource {
	return &BySubjectAndResource{Context: ctx, Handler: handler}
}

/*BySubjectAndResource swagger:route GET /permissions/subjects/{subject_type}/{subject_id}/{resource_type}/{resource_name} permissions bySubjectAndResource

Look Up by Subject and Resource

Looks up  permissions granted to a subject for a resource. If lookup mode is enabled and the subject is a user, the most lenient permission granted to the subject or any groups the subject belongs to will be listed. If lookup mode is not enabled or the subject is a group then only permissions assigned directly to the subject will be listed. This endpoint will currently list at most one permission, but the permission list format was chosen in favor of returning a 404 status if a permission does not exist because this endpoint may be called frequently when no corresponding permissions exist. This endpoint will return an error status if the subject ID is in use and associated with a different subject type.

*/
type BySubjectAndResource struct {
	Context *middleware.Context
	Handler BySubjectAndResourceHandler
}

func (o *BySubjectAndResource) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewBySubjectAndResourceParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

package subjects

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-swagger/go-swagger/httpkit"

	"permissions/models"
)

/*UpdateSubjectOK OK

swagger:response updateSubjectOK
*/
type UpdateSubjectOK struct {

	// In: body
	Payload *models.SubjectOut `json:"body,omitempty"`
}

// NewUpdateSubjectOK creates UpdateSubjectOK with default headers values
func NewUpdateSubjectOK() *UpdateSubjectOK {
	return &UpdateSubjectOK{}
}

// WithPayload adds the payload to the update subject o k response
func (o *UpdateSubjectOK) WithPayload(payload *models.SubjectOut) *UpdateSubjectOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update subject o k response
func (o *UpdateSubjectOK) SetPayload(payload *models.SubjectOut) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateSubjectOK) WriteResponse(rw http.ResponseWriter, producer httpkit.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		if err := producer.Produce(rw, o.Payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*UpdateSubjectBadRequest Bad Request

swagger:response updateSubjectBadRequest
*/
type UpdateSubjectBadRequest struct {

	// In: body
	Payload *models.ErrorOut `json:"body,omitempty"`
}

// NewUpdateSubjectBadRequest creates UpdateSubjectBadRequest with default headers values
func NewUpdateSubjectBadRequest() *UpdateSubjectBadRequest {
	return &UpdateSubjectBadRequest{}
}

// WithPayload adds the payload to the update subject bad request response
func (o *UpdateSubjectBadRequest) WithPayload(payload *models.ErrorOut) *UpdateSubjectBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update subject bad request response
func (o *UpdateSubjectBadRequest) SetPayload(payload *models.ErrorOut) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateSubjectBadRequest) WriteResponse(rw http.ResponseWriter, producer httpkit.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		if err := producer.Produce(rw, o.Payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*UpdateSubjectNotFound Not Found

swagger:response updateSubjectNotFound
*/
type UpdateSubjectNotFound struct {

	// In: body
	Payload *models.ErrorOut `json:"body,omitempty"`
}

// NewUpdateSubjectNotFound creates UpdateSubjectNotFound with default headers values
func NewUpdateSubjectNotFound() *UpdateSubjectNotFound {
	return &UpdateSubjectNotFound{}
}

// WithPayload adds the payload to the update subject not found response
func (o *UpdateSubjectNotFound) WithPayload(payload *models.ErrorOut) *UpdateSubjectNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update subject not found response
func (o *UpdateSubjectNotFound) SetPayload(payload *models.ErrorOut) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateSubjectNotFound) WriteResponse(rw http.ResponseWriter, producer httpkit.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		if err := producer.Produce(rw, o.Payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*UpdateSubjectInternalServerError update subject internal server error

swagger:response updateSubjectInternalServerError
*/
type UpdateSubjectInternalServerError struct {

	// In: body
	Payload *models.ErrorOut `json:"body,omitempty"`
}

// NewUpdateSubjectInternalServerError creates UpdateSubjectInternalServerError with default headers values
func NewUpdateSubjectInternalServerError() *UpdateSubjectInternalServerError {
	return &UpdateSubjectInternalServerError{}
}

// WithPayload adds the payload to the update subject internal server error response
func (o *UpdateSubjectInternalServerError) WithPayload(payload *models.ErrorOut) *UpdateSubjectInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update subject internal server error response
func (o *UpdateSubjectInternalServerError) SetPayload(payload *models.ErrorOut) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateSubjectInternalServerError) WriteResponse(rw http.ResponseWriter, producer httpkit.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		if err := producer.Produce(rw, o.Payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

package subjects

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-swagger/go-swagger/httpkit/middleware"
)

// AddSubjectHandlerFunc turns a function with the right signature into a add subject handler
type AddSubjectHandlerFunc func(AddSubjectParams) middleware.Responder

// Handle executing the request and returning a response
func (fn AddSubjectHandlerFunc) Handle(params AddSubjectParams) middleware.Responder {
	return fn(params)
}

// AddSubjectHandler interface for that can handle valid add subject params
type AddSubjectHandler interface {
	Handle(AddSubjectParams) middleware.Responder
}

// NewAddSubject creates a new http.Handler for the add subject operation
func NewAddSubject(ctx *middleware.Context, handler AddSubjectHandler) *AddSubject {
	return &AddSubject{Context: ctx, Handler: handler}
}

/*AddSubject swagger:route POST /subjects subjects addSubject

Add a Subject

Adds a subject (an entity to which permissions may be granted) to the database. For full use of the permissions service, the subject should be present in Grouper and have the same subject ID in Grouper and the permissions service.

*/
type AddSubject struct {
	Context *middleware.Context
	Handler AddSubjectHandler
}

func (o *AddSubject) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewAddSubjectParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

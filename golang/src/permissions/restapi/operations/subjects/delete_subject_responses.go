package subjects

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-swagger/go-swagger/httpkit"

	"permissions/models"
)

/*DeleteSubjectOK OK

swagger:response deleteSubjectOK
*/
type DeleteSubjectOK struct {
}

// NewDeleteSubjectOK creates DeleteSubjectOK with default headers values
func NewDeleteSubjectOK() *DeleteSubjectOK {
	return &DeleteSubjectOK{}
}

// WriteResponse to the client
func (o *DeleteSubjectOK) WriteResponse(rw http.ResponseWriter, producer httpkit.Producer) {

	rw.WriteHeader(200)
}

/*DeleteSubjectNotFound Not Found

swagger:response deleteSubjectNotFound
*/
type DeleteSubjectNotFound struct {

	// In: body
	Payload *models.ErrorOut `json:"body,omitempty"`
}

// NewDeleteSubjectNotFound creates DeleteSubjectNotFound with default headers values
func NewDeleteSubjectNotFound() *DeleteSubjectNotFound {
	return &DeleteSubjectNotFound{}
}

// WithPayload adds the payload to the delete subject not found response
func (o *DeleteSubjectNotFound) WithPayload(payload *models.ErrorOut) *DeleteSubjectNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete subject not found response
func (o *DeleteSubjectNotFound) SetPayload(payload *models.ErrorOut) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteSubjectNotFound) WriteResponse(rw http.ResponseWriter, producer httpkit.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		if err := producer.Produce(rw, o.Payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*DeleteSubjectInternalServerError delete subject internal server error

swagger:response deleteSubjectInternalServerError
*/
type DeleteSubjectInternalServerError struct {

	// In: body
	Payload *models.ErrorOut `json:"body,omitempty"`
}

// NewDeleteSubjectInternalServerError creates DeleteSubjectInternalServerError with default headers values
func NewDeleteSubjectInternalServerError() *DeleteSubjectInternalServerError {
	return &DeleteSubjectInternalServerError{}
}

// WithPayload adds the payload to the delete subject internal server error response
func (o *DeleteSubjectInternalServerError) WithPayload(payload *models.ErrorOut) *DeleteSubjectInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete subject internal server error response
func (o *DeleteSubjectInternalServerError) SetPayload(payload *models.ErrorOut) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteSubjectInternalServerError) WriteResponse(rw http.ResponseWriter, producer httpkit.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		if err := producer.Produce(rw, o.Payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

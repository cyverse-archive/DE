package subjects

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-swagger/go-swagger/httpkit"

	"permissions/models"
)

/*AddSubjectCreated Created

swagger:response addSubjectCreated
*/
type AddSubjectCreated struct {

	// In: body
	Payload *models.SubjectOut `json:"body,omitempty"`
}

// NewAddSubjectCreated creates AddSubjectCreated with default headers values
func NewAddSubjectCreated() *AddSubjectCreated {
	return &AddSubjectCreated{}
}

// WithPayload adds the payload to the add subject created response
func (o *AddSubjectCreated) WithPayload(payload *models.SubjectOut) *AddSubjectCreated {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the add subject created response
func (o *AddSubjectCreated) SetPayload(payload *models.SubjectOut) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AddSubjectCreated) WriteResponse(rw http.ResponseWriter, producer httpkit.Producer) {

	rw.WriteHeader(201)
	if o.Payload != nil {
		if err := producer.Produce(rw, o.Payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*AddSubjectBadRequest Bad Request

swagger:response addSubjectBadRequest
*/
type AddSubjectBadRequest struct {

	// In: body
	Payload *models.ErrorOut `json:"body,omitempty"`
}

// NewAddSubjectBadRequest creates AddSubjectBadRequest with default headers values
func NewAddSubjectBadRequest() *AddSubjectBadRequest {
	return &AddSubjectBadRequest{}
}

// WithPayload adds the payload to the add subject bad request response
func (o *AddSubjectBadRequest) WithPayload(payload *models.ErrorOut) *AddSubjectBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the add subject bad request response
func (o *AddSubjectBadRequest) SetPayload(payload *models.ErrorOut) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AddSubjectBadRequest) WriteResponse(rw http.ResponseWriter, producer httpkit.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		if err := producer.Produce(rw, o.Payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*AddSubjectInternalServerError add subject internal server error

swagger:response addSubjectInternalServerError
*/
type AddSubjectInternalServerError struct {

	// In: body
	Payload *models.ErrorOut `json:"body,omitempty"`
}

// NewAddSubjectInternalServerError creates AddSubjectInternalServerError with default headers values
func NewAddSubjectInternalServerError() *AddSubjectInternalServerError {
	return &AddSubjectInternalServerError{}
}

// WithPayload adds the payload to the add subject internal server error response
func (o *AddSubjectInternalServerError) WithPayload(payload *models.ErrorOut) *AddSubjectInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the add subject internal server error response
func (o *AddSubjectInternalServerError) SetPayload(payload *models.ErrorOut) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AddSubjectInternalServerError) WriteResponse(rw http.ResponseWriter, producer httpkit.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		if err := producer.Produce(rw, o.Payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

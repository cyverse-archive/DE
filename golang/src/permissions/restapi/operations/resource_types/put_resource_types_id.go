package resource_types

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-swagger/go-swagger/httpkit/middleware"
)

// PutResourceTypesIDHandlerFunc turns a function with the right signature into a put resource types ID handler
type PutResourceTypesIDHandlerFunc func(PutResourceTypesIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PutResourceTypesIDHandlerFunc) Handle(params PutResourceTypesIDParams) middleware.Responder {
	return fn(params)
}

// PutResourceTypesIDHandler interface for that can handle valid put resource types ID params
type PutResourceTypesIDHandler interface {
	Handle(PutResourceTypesIDParams) middleware.Responder
}

// NewPutResourceTypesID creates a new http.Handler for the put resource types ID operation
func NewPutResourceTypesID(ctx *middleware.Context, handler PutResourceTypesIDHandler) *PutResourceTypesID {
	return &PutResourceTypesID{Context: ctx, Handler: handler}
}

/*PutResourceTypesID swagger:route PUT /resource_types/{id} resource_types putResourceTypesId

Update a Resource Type

Updates the name or description of a resource type. The new name of the resource type must be unique if one is provided.

*/
type PutResourceTypesID struct {
	Context *middleware.Context
	Handler PutResourceTypesIDHandler
}

func (o *PutResourceTypesID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewPutResourceTypesIDParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

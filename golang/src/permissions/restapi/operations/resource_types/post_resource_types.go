package resource_types

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-swagger/go-swagger/httpkit/middleware"
)

// PostResourceTypesHandlerFunc turns a function with the right signature into a post resource types handler
type PostResourceTypesHandlerFunc func(PostResourceTypesParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostResourceTypesHandlerFunc) Handle(params PostResourceTypesParams) middleware.Responder {
	return fn(params)
}

// PostResourceTypesHandler interface for that can handle valid post resource types params
type PostResourceTypesHandler interface {
	Handle(PostResourceTypesParams) middleware.Responder
}

// NewPostResourceTypes creates a new http.Handler for the post resource types operation
func NewPostResourceTypes(ctx *middleware.Context, handler PostResourceTypesHandler) *PostResourceTypes {
	return &PostResourceTypes{Context: ctx, Handler: handler}
}

/*PostResourceTypes swagger:route POST /resource_types resource_types postResourceTypes

Add a Resource Type

Adds a resource type to the list of available resource types. The name of the resource type must be unique.

*/
type PostResourceTypes struct {
	Context *middleware.Context
	Handler PostResourceTypesHandler
}

func (o *PostResourceTypes) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewPostResourceTypesParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

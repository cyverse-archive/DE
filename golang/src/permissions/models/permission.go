package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-swagger/go-swagger/strfmt"

	"github.com/go-swagger/go-swagger/errors"
)

/*Permission Information about permissions granted to a user.

swagger:model permission
*/
type Permission struct {

	/* id

	Required: true
	*/
	ID PermissionID `json:"id"`

	/* permission level

	Required: true
	*/
	PermissionLevel PermissionLevel `json:"permission_level"`

	/* resource

	Required: true
	*/
	Resource *ResourceOut `json:"resource"`

	/* subject

	Required: true
	*/
	Subject *SubjectOut `json:"subject"`
}

// Validate validates this permission
func (m *Permission) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePermissionLevel(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateResource(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSubject(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Permission) validateID(formats strfmt.Registry) error {

	if err := m.ID.Validate(formats); err != nil {
		return err
	}

	return nil
}

func (m *Permission) validatePermissionLevel(formats strfmt.Registry) error {

	if err := m.PermissionLevel.Validate(formats); err != nil {
		return err
	}

	return nil
}

func (m *Permission) validateResource(formats strfmt.Registry) error {

	if m.Resource != nil {

		if err := m.Resource.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *Permission) validateSubject(formats strfmt.Registry) error {

	if m.Subject != nil {

		if err := m.Subject.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

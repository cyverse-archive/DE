package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-swagger/go-swagger/strfmt"

	"github.com/go-swagger/go-swagger/errors"
)

/*SubjectOut An outgoing subject.

swagger:model subject_out
*/
type SubjectOut struct {

	/* id

	Required: true
	*/
	ID InternalSubjectID `json:"id"`

	/* subject id

	Required: true
	*/
	SubjectID ExternalSubjectID `json:"subject_id"`

	/* subject type

	Required: true
	*/
	SubjectType SubjectType `json:"subject_type"`
}

// Validate validates this subject out
func (m *SubjectOut) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSubjectID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSubjectType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SubjectOut) validateID(formats strfmt.Registry) error {

	if err := m.ID.Validate(formats); err != nil {
		return err
	}

	return nil
}

func (m *SubjectOut) validateSubjectID(formats strfmt.Registry) error {

	if err := m.SubjectID.Validate(formats); err != nil {
		return err
	}

	return nil
}

func (m *SubjectOut) validateSubjectType(formats strfmt.Registry) error {

	if err := m.SubjectType.Validate(formats); err != nil {
		return err
	}

	return nil
}
